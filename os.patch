--- a/oses/simpleos.asm
+++ b/oses/simpleos.asm
@@ -357,51 +357,55 @@
         .FILL TRAP_HALT  ; x25
 
 TRAP_OUT
-        ST R1, OS_R1         ; save R1
+	ADD R6, R6, #-1	; push R1
+	STR R1, R6, #0
 TRAP_OUT_WAIT
         LDI R1, OS_DSR       ; wait for the display to be ready
         BRzp TRAP_OUT_WAIT
         STI R0, OS_DDR       ; write the character and return
-        LD R1, OS_R1         ; restore R1
+	LDR R1, R6, #0	; pop R1
+	ADD R6, R6, #1
         RTI
 
 TRAP_PUTS
-        ST R0, OS_R0         ; save R0, R1, and R7
-        ST R1, OS_R1
-        ST R7, OS_R7
+	ADD R6, R6, #-1	; push R0
+	STR R0, R6, #0
+	ADD R6, R6, #-1	; push R1
+	STR R1, R6, #0
+	ADD R6, R6, #-1	; push R7
+	STR R7, R6, #0
         ADD R1, R0, #0       ; move string pointer (R0) into R1
 
 TRAP_PUTS_LOOP
         LDR R0, R1, #0       ; write characters in string using OUT
         BRz TRAP_PUTS_DONE
         OUT
         ADD R1, R1, #1
         BRnzp TRAP_PUTS_LOOP
 
 TRAP_PUTS_DONE
-        LD R0, OS_R0         ; restore R0, R1, and R7
-        LD R1, OS_R1
-        LD R7, OS_R7
+	LDR R7, R6, #0	; pop R7
+	ADD R6, R6, #1
+	LDR R1, R6, #0	; pop R1
+	ADD R6, R6, #1
+	LDR R0, R6, #0	; pop R0
+	ADD R6, R6, #1
         RTI
 
 TRAP_IN
-        ST R7, OS_R7         ; save R7 (no need to save R0, since overwrite later
+	ADD R6, R6, #-1	; push R7
+	STR R7, R6, #0
         LEA R0, TRAP_IN_MSG  ; prompt for input
         PUTS
         GETC                 ; read a character
         OUT                  ; echo back to monitor
-        ST R0, OS_R0         ; save the character
+	ADD R6, R6, #-1	; push R0
+	STR R0, R6, #0
         AND R0, R0, #0       ; write a linefeed, too
         ADD R0, R0, #10
         OUT
-        LD R0, OS_R0         ; restore the character
-        LD R7, OS_R7         ; restore R7
+	LDR R0, R6, #0	; pop R0
+	ADD R6, R6, #1
+	LDR R7, R6, #0	; pop R7
+	ADD R6, R6, #1
         RTI
 
 TRAP_PUTSP ; TODO: I want to focus on what we are doing in class
@@ -410,12 +414,16 @@
 
 
 TRAP_PUTSP_DONE
-        LD R0, OS_R0         ; restore R0, R1, R2, R3, and R7
-        LD R1, OS_R1
-        LD R2, OS_R2
-        LD R3, OS_R3
-        LD R7, OS_R7
+	LDR R7, R6, #0	; pop R7
+	ADD R6, R6, #1
+	LDR R3, R6, #0	; pop R3
+	ADD R6, R6, #1
+	LDR R2, R6, #0	; pop R2
+	ADD R6, R6, #1
+	LDR R1, R6, #0	; pop R1
+	ADD R6, R6, #1
+	LDR R0, R6, #0	; pop R0
+	ADD R6, R6, #1
         RTI
 
 TRAP_HALT
@@ -438,20 +446,24 @@
 
 ; Keyboard interrupt handler
 KBDINT
-        ST R0, OS_R0
-        ST R1, OS_R1
-        ST R7, OS_R7
-
-        ; Read the key to clear the interrupt
-        LDI R0, OS_KBDR
-
-        ; You could do something with the key here
-        ; For now, we just acknowledge the interrupt
-
-        LD R0, OS_R0
-        LD R1, OS_R1
-        LD R7, OS_R7
-        RTI
+	ADD R6, R6, #-1	; push R0
+	STR R0, R6, #0
+	ADD R6, R6, #-1	; push R1
+	STR R1, R6, #0
+	ADD R6, R6, #-1	; push R7
+	STR R7, R6, #0
+
+	; Read the key to clear the interrupt
+	LDI R0, OS_KBDR
+
+	; You could do something with the key here
+	; For now, we just acknowledge the interrupt
+
+	LDR R7, R6, #0	; pop R7
+	ADD R6, R6, #1
+	LDR R1, R6, #0	; pop R1
+	ADD R6, R6, #1
+	LDR R0, R6, #0	; pop R0
+	ADD R6, R6, #1
+	RTI
 
 ;------------------------------------------------------------------------------
 ; Error handling routines
